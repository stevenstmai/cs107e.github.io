had to get these from old laptop

here's a bunch.

they try to be cute about bounds checking by adding two tainted (user supplied) values 
together and doing a single check.  obv attack: make one really large, wrap around.  you can
make size / offset just about anything you want.

/* 2.4.9/drivers/net/wan/farsync.c:fst_ioctl */
if(wrthdr.size + wrthdr.offset > FST_MEMSIZE)
    return -ENXIO;
if(copy_from_user (card->mem + wrthdr.offset,
                  ifr->ifr_data, wrthdr.size))
    return -EFAULT;



simple pattern, int's = you have to do an upper / lower check, but they just do an upper.
lots of bugs like this.

/* 2.4.5/drivers/char/drm/i810_dma.c:1417:
     i810_copybuf */
if(copy_from_user(&d, arg, sizeof(d)))
    return -EFAULT;
if(d.idx > dma->buf_count)
    return -EINVAL;
buf = dma->buflist[ d.idx ];
...
if (copy_from_user(buf_priv->virtual,
                      d.address, d.used))
    return -EFAULT;


this is a bit more subtle.   kmalloc fails if you try to allocate more than 64k.   people use this as an upper bound check.    *however* if you ask for 0 bytes it returns a non-null pointer to a very small amount of memory.   there the overflow: make path_len MAX_UINT, asks for 0, gets a small amount, then you obliterate the universe by copying UINT_MAX data from user space into the kernel.

/* 2.4.9-ac7/fs/intermezzo/psdev.c:
         presto_psdev_ioctl */
err = copy_from_user(&input,arg,sizeof(input));
...
input.path = kmalloc(input.path_len + 1,
                       GFP_KERNEL);
if(!input.path)
      return -ENOMEM;
error = copy_from_user(input.path, user_path,
                              input.path_len);


this led to days of kernel mailing list arguments.  they read user data into an int.  they don't lower bounds check it.  they then pass it as the length field to copy_to_user, which expects an unsigned.  negative --> unsigned = very large.

/* 2.4.1/kernel/sysctl.c:do_sysctl_strategy */
int len;
...
  get_user(len, oldlenp);
  if (len) {
     if (len > table->maxlen)
         len = table->maxlen;
     if(copy_to_user(oldval, table->data, len))
         return -EFAULT;
